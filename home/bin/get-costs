#!/apollo/env/Git/bin/python

import json, subprocess, optparse, sys

VCS_HOST="vendorcost-us.bsf.amazon.com"
VCS_PORT=31010

def call_bsf(method, args):
    cmd = "bsfcli -h {host} -p {port} -s VendorCostService -m {method} --args '{args}' --print".format(
        host=VCS_HOST, port=VCS_PORT, method=method, args=json.dumps(args))
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, shell=True)
    result=json.load(p.stdout)
    try:
        return result['result']
    except:
        print(result)
        sys.exit(1)

def get_vendor_codes(asin):
    args = { 'asin' : asin }
    return call_bsf('getCostVendorCodes', args)['value']

def get_cost_for_vendor(asin, vendor):
    args = { 'asin' : asin, 'vendorCode' : vendor } 
    return call_bsf('calculateCost', args)['cost']

def get_cost_string(asin, vendor):
    cost = get_cost_for_vendor(asin, vendor)
    return "{vendor}: {value} {unit}".format(vendor=vendor, value=cost['Value'], unit=cost['Unit'])

def get_costs_for_vendors(asin, vendors):
    return [get_cost_string(asin, vendor) for vendor in vendors]

def get_costs(asin):
    print(asin)
    vendors = get_vendor_codes(asin)
    return get_costs_for_vendors(asin, vendors)

if(__name__=="__main__"):
    parser = optparse.OptionParser(description='Prints vendor costs for a given ASIN.')
    parser.add_option('--asin')
    (options, args) = parser.parse_args()
   
    costs = get_costs(options.asin)
    print("\n".join(costs))
